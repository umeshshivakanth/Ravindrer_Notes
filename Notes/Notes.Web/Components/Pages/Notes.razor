@page "/"
@page "/notes"
@using global::Notes.Application.Services
@using global::Notes.Domain.Enums
@using global::Notes.Application.DTOs
@inject INotesService notesService
@rendermode InteractiveServer

<h5>Notes</h5>
<EditForm Model="@note" OnValidSubmit="SaveNoteAsync" class="note-form">
    <DataAnnotationsValidator />
    <div class="form-card">
        <div class="form-card-body">
            <div class="row">
                <div class="col-md-3">
                    <InputText @bind-Value="note.Title" placeholder="Title" />
                    <ValidationMessage For="@(() => note.Title)" />
                </div>
                <div class="col-md-6">
                    <InputTextArea @bind-Value="note.Description" placeholder="Description" />
                    <ValidationMessage For="@(() => note.Description)" />
                </div>
                <div class="col-md-2">
                    <InputSelect @bind-Value="note.Priority">
                        @foreach (var sev in Enum.GetValues<Priority>())
                        {
                            <option value="@sev">@sev</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => note.Priority)" />
                </div>
                <div class="form-add col-md-1">
                    <button class="btn-add" type="submit">Add</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else if (!notes.Any())
{
    <div class="no-data">No data found.</div>
}
else
{
    <div class="note-list">
        @foreach (var note in notes)
        {
            <div class="note-card @GetCardBorderCss(note.Priority)" data-note-id="@note.Id">
                <div class="note-card-body">
                    @if (editingNote == null || editingNote.Id != note.Id)
                    {
                        <div class="note-row">
                            <div class="note-view">
                                <h5 class="note-card-title">
                                    <span class="note-title">@note.Title</span>
                                    <span class="@GetBadgeCss(note.Priority) note-priority" data-value="@note.Priority">@note.Priority</span>
                                </h5>
                                <p class="note-content">@note.Description</p>
                                <small class="note-date">Created On - @note.CreatedOn</small>
                                @if (!string.IsNullOrEmpty(note.UpdatedOn))
                                {
                                    <small class="note-date"> • Updated On - @note.UpdatedOn</small>
                                }
                            </div>
                            <div class="note-actions">
                                <button class="btn-edit" @onclick="() => EditNote(note)">Edit</button>
                                <button class="btn-delete" @onclick="() => DeleteNote(note.Id)">Delete</button>
                            </div>
                        </div>
                    }
                    else if (editingNote != null && editingNote.Id == note.Id)
                    {
                        <EditForm Model="@editingNote" OnValidSubmit="SaveEditAsync" class="note-edit-form">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-3">
                                    <InputText @bind-Value="editingNote.Title" placeholder="Title" />
                                    <ValidationMessage For="@(() => editingNote.Title)" />
                                </div>

                                <div class="col-md-5">
                                    <InputTextArea rows="3" @bind-Value="editingNote.Description" placeholder="Description" />
                                    <ValidationMessage For="@(() => editingNote.Description)" />
                                </div>
                                <div class="col-md-2">
                                    <InputSelect class="input-priority" @bind-Value="editingNote.Priority">
                                        @foreach (var sev in Enum.GetValues<Priority>())
                                        {
                                            <option value="@sev">@sev</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => editingNote.Priority)" />
                                </div>
                                <div class="edit-actions col-md-2">
                                    <button class="btn-save" type="submit">Save</button>
                                    <button class="btn-cancel" type="button" @onclick="CancelEdit">Cancel</button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        }
    </div>
}
